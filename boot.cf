(( comments are built in ))
[ (ha) @ (la) @ (vha) @
: here  (ha)  @ ;
: vhere (vha) @ ;
: last  (la)  @ ;
: c, here dup 1+     (ha) ! c! ;
: w, here dup 2 +    (ha) ! w! ;
: ,  here dup cell + (ha) ! ! ;
: allot vhere + (vha) ! ;
: dbg emit 13 emit 10 emit ;
: const addword (lit4) c, , (exit) c, ;
: var   vhere const allot ;

[ const -vha-
[ const -la-
[ const -ha-

: immediate 1 last cell + c! ; [ immediate
: inline    2 last cell + c! ; [ immediate

: begin here ; immediate
: while  (jmpnz)  c, , ; immediate
: -while (njmpnz) c, , ; immediate
:  until (jmpz)   c, , ; immediate
: -until (njmpz)  c, , ; immediate
: again  (jmp)    c, , ; immediate

: if (jmpz)   c, here 0 , ; immediate
: -if (njmpz) c, here 0 , ; immediate
: if0 (jmpnz) c, here 0 , ; immediate
: then here swap ! ; immediate

: a+  a@ 1+ a! ; inline
: a-  a@ 1- a! ; inline
: @a  a@  c@ ; inline
: @a+ a@+ c@ ; inline
: @a- a@- c@ ; inline
: !a  a@  c! ; inline
: !a+ a@+ c! ; inline
: !a- a@- c! ; inline
: t+  t@ 1+ t! ; inline
: t-  t@ 1- t! ; inline
: @t  t@  c@ ; inline
: @t+ t@+ c@ ; inline
: @t- t@- c@ ; inline
: !t  t@  c! ; inline
: !t+ t@+ c! ; inline
: !t- t@- c! ; inline
: t@+c t@ dup cell + t! ; inline
: adrop  a> drop ; inline
: tdrop  t> drop ; inline
: atdrop a> drop t> drop ; inline

(( STATES/MODES ))
(( 1: DEFINE ))
(( 2: COMPILE ))
(( 6: INTERP ))
(( 7: COMMENT ))

: comp? state @ 2 = ;
: (quote) ( -- )  vhere dup >t  >in @ 1+ >a
   begin
      @a '"' = if
         0 !t+  a> 1+ >in !
         comp? if0 tdrop exit then
         t> (vha) ! (lit4) c, , exit
      then @a+ !t+
   again ;

: "  (quote) ; immediate
: ." (quote) comp? if (ztype) c, exit then ztype ; immediate

(( reboot ))
: fopen-r " rb"  fopen ;
: fopen-w " wb"  fopen ;
: reboot
   -vha- (vha) !  -la- (la) !  -ha- (ha) !
   " boot.cf" fopen-r -if dup then if >a
      vars 10000 + >t
      25000 for 0 i t@ + c! next
      t@ 25000 a@ fread drop a> fclose
      t> >in !
   then ;

: bl 32 ; inline
: tab 9 emit ; inline
: cr 13 emit 10 emit ; inline
: space bl emit ; inline
: negate com 1+ ; inline
: abs dup 0 < if negate then ;

: #neg 0 >a dup 0 < if negate a+ then ;
: <# #neg last 32 - >t 0 t@ c! ;
: hold t@ 1- dup t! c! ;
: #n '0' + dup '9' > if 7 + then hold ;
: #. '.' hold ;
: # base @ /mod swap #n ;
: #s begin # -while drop ;
: #> a@ if '-' hold then t> adrop ;

: (.)  ( n-- ) <# #s #> ztype ;
: .  ( n-- ) (.) space ;
: .2 ( n-- ) <# # #s #> ztype space ;
: .3 ( n-- ) <# # # #s #> ztype space ;
: hex     $10 base ! ;
: decimal #10 base ! ;
: binary  %10 base ! ;
: .hex  ( n-- ) base @ >t hex .2 t> base ! ;
: .dec  ( n-- ) base @ >t decimal .3 t> base ! ;
: .bin  ( n-- ) base @ >t binary . t> base ! ;
: .$hex ( n-- ) base @ >t '$' emit hex (.) t> base ! ;
: .#dec ( n-- ) base @ >t '#' emit decimal (.) t> base ! ;
: .%bin ( n-- ) base @ >t '%' emit binary (.) t> base ! ;

: execute ( xt-- ) >r ;
: :noname here 2 state ! ;
: cells cell * ; inline
: cell+ cell + ; inline
: 2+ 1+ 1+ ; inline
: 2* dup + ; inline
: 2/ 2 / ; inline
: 2dup over over ; inline
: 2drop drop drop ; inline
: mod /mod drop ; inline
: ?dup -if dup then ;
: ? @ . ;
: nip  swap drop ; inline
: tuck swap over ; inline
: +! ( n a-- ) tuck @ + swap ! ;
: min ( a b--c ) 2dup > if swap then drop ;
: max ( a b--c ) 2dup < if swap then drop ;
: vc, vhere c! 1 allot ;
: v, vhere ! cell allot ;

: 0sp 0 (dsp) ! ;
: depth (dsp) @ 1- ;
: lpar '(' emit ; inline
: rpar ')' emit ; inline
: .comma ',' emit ; inline
: .s lpar space depth ?dup if
      for i 1+ cells dstk + @ . next
   then rpar ;

: dict-end dict dict-sz + 1- ;
: de>xt    @ ;
: de>flags cell + c@ ;
: de>len   cell + 1+ c@ ;
: de>name  cell + 2+ ;
: .de-word de>name ztype t@+ 10 > if 0 t! cr exit then tab ;
: words last >a 1 >t 0 >r begin
    a@ de>len 7 > if t+ then
    a@ .de-word a@ de-sz + a! r@ 1+ r!
    a@ dict-end < while lpar r> . ." words)" adrop ;

(( memory ))
: fill ( addr num ch-- ) >t >r >a  r> for t@ !a+ next atdrop ;
: cmove ( src dst num-- ) >r >t >a
    r> ?dup if for @a+ !t+ next then
    atdrop ;
: cmove> ( src dst num-- ) >r  r@ + >t  r@ + >a
    r> ?dup if 1+ for @a- !t- next then
    atdrop ;

(( strings ))
: s-end  ( str--end )     dup s-len + ; inline
: s-cat  ( dst src--dst ) over s-end swap s-cpy drop ;
: s-catc ( dst ch--dst )  over s-end tuck c! 0 swap 1+ c! ;
: s-catn ( dst num--dst ) <# #s #> over s-end swap s-cpy drop ;
: p ( --a ) vhere 100 + ;

(( screen ))
: csi       ( -- )    27 emit '[' emit ;
: ->cr      ( c r-- ) csi (.) ';' emit (.) 'H' emit ;
: ->rc      ( r c-- ) swap ->cr ;
: cls       ( -- )    csi ." 2J" 1 dup ->cr ;
: clr-eol   ( -- )    csi ." 0K" ;
: cur-on    ( -- )    csi ." ?25h" ;
: cur-off   ( -- )    csi ." ?25l" ;
: cur-block ( -- )    csi ." 2 q" ;
: cur-bar   ( -- )    csi ." 5 q" ;

: color   ( bg fg-- ) csi (.) ';' emit (.) 'm' emit ;
: fg      ( fg-- )    40 swap color ;
: black  30 fg ;      : red    31 fg ;
: green  32 fg ;      : yellow 33 fg ;
: blue   34 fg ;      : purple 35 fg ;
: cyan   36 fg ;      : grey   37 fg ;
: white   0 fg ;
: colors 31 >a 7 for a@ fg ." color #" a@+ . cr next white adrop ;

(( blocks ))
[ cell var blk
: rows 32 ; inline
: cols 100 ; inline
[ rows cols * const block-sz
: last-block   99 ; inline
[ last-block 1+ block-sz * const disk-sz
[ vars vars-sz + disk-sz - const disk
: ->block ( n--a ) last-block min 0 max block-sz * disk + ;
: disk-read " disk.c5" fopen-r ?dup
   if >a disk disk-sz a@ fread drop a> fclose then ;
: disk-flush " disk.c5" fopen-w ?dup
   if >a disk disk-sz a@ fwrite drop a> fclose then ;
: blk-cp  ( src dst-- ) >t ->block t> ->block block-sz cmove ;
: blk-clr ( blk-- ) ->block block-sz 0 fill ;
: blk-mv  ( src dst-- ) over >t blk-cp t> blk-clr ;
: aemit ( b-- ) dup $20 < over $7e > or if drop '.' then emit ;
: blk-cat ( blk-- ) ->block rows for
      i .2 space cols for dup c@ aemit 1+ next cr
   next drop ;
: blk-cp-n ( src dst n-- ) >r >t >a r> for a@+ t@+ blk-cp next atdrop ;
: blk-mv-n ( src dst n-- ) >r >t >a r> for a@+ t@+ blk-mv next atdrop ;
: blk-ins ( blk start-- ) >a >t
   begin a@- a@ swap blk-cp a@ t@ > while
   atdrop ;
: blk-del ( blk stop-- ) >a >t
   begin t@+ t@ swap blk-cp t@ a@ < while
   t> blk-clr atdrop ;
[ disk-read

(( accept ))
: printable? ( c--f ) dup 31 > swap 127 < and ;
: bs 8 emit ; inline
: accept ( dst-- ) dup >r >t 0 >a
  begin key a!
     a@   3 =  a@ 27 = or if 0 r> c! atdrop exit then
     a@  13 = if 0 !t atdrop rdrop exit then
     a@   8 = if 127 a! then ( Windows: 8=backspace )
     a@ 127 = if r@ t@ < if t- bs space bs then then
     a@ printable? if a@ dup !t+ emit then
  again ;

(( a simple block editor ))
[ block-sz var ed-block
: block->ed ( blk-- ) blk @ ->block ed-block block-sz cmove ;
: ed->block ( blk-- ) ed-block blk @ ->block block-sz cmove ;
: last-ch  ( --a ) ed-block block-sz + 1- ;
[ cell var (r)  : row! (r) ! ;  : row@ (r) @ ;
[ cell var (c)  : col! (c) ! ;  : col@ (c) @ ;
: norm-pos ( pos--new ) ed-block max last-ch min ;
: cr->pos ( col row--pos ) cols * + ed-block + ;
: rc->pos ( --pos ) col@ row@ cr->pos ;
: row-last ( r--a ) cols 1- swap cr->pos ;
: pos->rc ( pos-- ) norm-pos ed-block - cols /mod row! col! ;
: mv ( r c-- )  (c) +! (r) +! rc->pos  pos->rc ;
[ 1 var (mode)             : mode@   (mode)  c@ ;
[ 1 var (show)             : show?   (show)  c@ ;
[ 1 var (dirty)            : dirty?  (dirty) c@ ;
: mode! (mode) c! ;      : clean 0 (dirty) c! ;
: show!  1 (show)  c! ;  : shown 0 (show)  c! ;
: dirty! 1 (dirty) c! show! ;
: ->norm  0 mode! ;
: ->repl  1 mode! ;    : repl? mode@ 1 = ;
: ->ins   2 mode! ;    : ins?  mode@ 2 = ;
: quit!  99 mode! ;    : quit?  mode@ 99 = ;  
: .b1 exit green cols 2+ for '-' emit next white cr ;
: .b2 exit green '|' emit white ;
: ed-emit ( ch-- )
   dup 31 > if emit exit then ( regular ch )
   dup  8 < if 30 + fg 0 then ( mode-change )
   drop 32 emit ;
: .scr 1 dup ->rc .b1 ed-block >a rows for 
      .b2 cols for @a+ ed-emit next .b2 cr
   next .b1 adrop ;
: ->cur  col@ 1+ row@ 1+ ->cr ;
: ->foot 1 rows 3 + ->cr ;
: ->cmd ->foot cr ;
: ./ '/' emit ;
: .foot ->foot ." Block #" blk @ .
   bl dirty? if drop '*' then emit space
   lpar row@ 1+ (.) .comma col@ 1+ (.) rpar
   repl? if yellow ."  -replace-" white then
   ins?  if purple ."  -insert-"  white then
   rc->pos c@ dup space lpar .#dec ./ .$hex rpar clr-eol ;
: show show? if cur-off .scr cur-on shown then .foot ->cur ;
: mv-left 0 dup 1-      mv ;   : mv-right 0 1 mv ;
: mv-up   0 dup 1- swap mv ;   : mv-down  1 0 mv ;
: ins-bl  dirty! row@ row-last >a  rc->pos >t
   begin a@ 1- c@ !a- a@ t@ > while bl a> c! tdrop ;
: replace-char! ( ch-- ) rc->pos c! mv-right dirty! ;
: replace-char  ( -- ) a@ printable? if a@ replace-char! then ;
: insert-char   ( -- ) a@ printable? if ins-bl a@ replace-char! then ;
: del-ch  dirty!  row@ row-last >a  rc->pos >t
   begin t@ 1+ c@ !t+ t@ a@ < while 32 t> c! adrop ;
: clr-line 0 row@ cr->pos >a cols for 32 !a+ next adrop dirty! ;
: ins-line  row@ rows < if 
      last-ch >a  a@ cols - >t  0 row@ cr->pos >r
      begin @t- !a- t@ r@ < until
      atdrop rdrop
   then clr-line ;
: del-line  row@ rows < if
      0 row@ cr->pos >t  t@ cols + >a  last-ch >r
      begin @a+ !t+  a@ r@ > until 
      atdrop rdrop
   then row@  rows 1- row!  clr-line  row! ;
: next-pg ed->block  blk @ 1+ last-block min blk ! block->ed show! clean ;
: prev-pg ed->block  blk @ 1- 0 max blk ! block->ed show! clean ;
: do-cmd ->cmd '!' emit clr-eol p accept
   p " q" s-eqi if quit! then
   ->cmd clr-eol ;

: case  ( ch -- ) v, find drop v, ;   ( case-table entry - single word )
: case! ( ch-- )  v, here v, 2 state ! ;   ( case-table entry - code )

(( VI-like commands ))
[ vhere const ed-cases
[ 'h'  case  mv-left               'j'  case  mv-down  
[ 'k'  case  mv-up                 'l'  case  mv-right
[ 32   case  mv-right              'b'  case  ins-bl
[ 'x'  case  del-ch                'C'  case  clr-line
[ 'R'  case  ->repl                'i'  case  ->ins
[ 'O'  case  ins-line              'D'  case  del-line
[ '+'  case  next-pg               '-'  case  prev-pg
[ '!'  case do-cmd
[ ':'  case! ] 1 replace-char! ; ( DEFINE )
[ ']'  case! ] 2 replace-char! ; ( COMPILE )
[ '['  case! ] 6 replace-char! ; ( INTERP )
[ '('  case! ] 7 replace-char! ; ( COMMENT )
[ 'X'  case! ] mv-left del-ch ;
[ '_'  case! ] 0 col! ;          [ 'o'  case! ] mv-down ins-line ;
[ 0 v, 0 v, (( end ))

[ vhere const ed-ctrl-cases
[ 13   case! mv-down 0 col! ;
[ 27   case  ->norm
[ 0 v, 0 v, (( end ))

(( switch: case-table process ))
: switch ( tbl-- )
   >t begin
      t@ @ if0 tdrop exit then
      t@+c @ a@ = if t> @ >r exit then
      t@ cell+ t!
   again tdrop ;

: process-key ( -- )
   a@ 32 < a@ 127 > or if ed-ctrl-cases switch exit then
   ins?  if insert-char exit then
   repl? if replace-char exit then
   ed-cases switch ;
: ed-loop begin show key >a process-key adrop quit? until ;
: ed-init block->ed 0 mode! show! 0 dup row! col! cls ;
: ed  ed-init ed-loop ed->block ->cmd ;
: edit  blk ! ed ;

(( ... from Peter Jakacki ))
: .ascii ( -- ) a@ $10 - $10 for dup c@ aemit 1+ next drop ;
: dump ( f n-- ) swap >a 0 >t
   for
      t@ if0 cr a@ .hex ." : " then
      @a+ .hex
      t@+ $0f = if ."    " .ascii 0 t! then
   next drop atdrop ;

(( fg1: forget-one ))
: fg1 last dup de-sz + (la) ! @ (ha) ! ;  

[ cell var fgh
[ cell var fgl
[ cell var fgv
: marker here fgh ! last fgl ! vhere fgv ! ;
: forget fgh @ (ha) ! fgl @ (la) ! fgv @ (vha) ! ;

: .version  green ." cf v" version <# # # #. # # #. #s #> ztype white cr ;
[ marker
[ cr .version ." hello" cr

(( temp for testing ))
vhere const wd 32 allot
vhere const wd-in cell allot
: skip-ws ( p1--p2 ) 
   begin
      dup c@ ?dup if0 exit then
      32 > if exit then 1+ 
   again ;
: next-wd ( p1 wd--p2 ) >t skip-ws >a
   begin
      @a 33 < if 0 !t a@ atdrop exit then
      @a+ !t+
   again ;

(( move this boot code to the disk area ))
: boot->disk vars 10000 + disk 25000 cmove ;

[ boot->disk

(( some benchmarks ))
: mil 1000 dup * * ;
: elapsed timer swap - . ." usec" ;
: bm timer swap for next elapsed ;
: fib 1- dup 2 < if drop 1 exit then dup fib swap 1- fib + ;
: fib-bm timer swap fib . elapsed ;

: lg   " lazygit" system ;
: ls   " ls -l" system ;
: pwd  " pwd" system ;
[
